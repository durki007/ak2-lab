$ ls -a
.  ..  rw.s
$ file rw.s
rw.s: ASCII assembler program text
$ cat rw.s
# Numbers of kernel functions.
EXIT_NR  = 1
READ_NR  = 3
WRITE_NR = 4

STDOUT = 1
EXIT_CODE_SUCCESS = 0


.text
msg: .ascii "Hello, world!\n"
msgLen = . - msg


.global _start

_start:

mov $WRITE_NR, %eax 
mov $STDOUT  , %ebx 
mov $msg     , %ecx 
mov $msgLen  , %edx 
int $0x80


mov $EXIT_NR          , %eax
mov $EXIT_CODE_SUCCESS, %ebx 
int $0x80

$ as -alh rw.s
GAS LISTING rw.s 			page 1


   1              	# Numbers of kernel functions.
   2              	EXIT_NR  = 1
   3              	READ_NR  = 3
   4              	WRITE_NR = 4
   5              	
   6              	STDOUT = 1
   7              	EXIT_CODE_SUCCESS = 0
   8              	
   9              	
  10              	.text
  11 0000 48656C6C 	msg: .ascii "Hello, world!\n"
  11      6F2C2077 
  11      6F726C64 
  11      210A
  12              	msgLen = . - msg
  13              	
  14              	
  15              	.global _start
  16              	
  17              	_start:
  18              	
  19 000e B8040000 	mov $WRITE_NR, %eax 
  19      00
  20 0013 BB010000 	mov $STDOUT  , %ebx 
  20      00
  21 0018 B9000000 	mov $msg     , %ecx 
  21      00
  22 001d BA0E0000 	mov $msgLen  , %edx 
  22      00
  23 0022 CD80     	int $0x80
  24              	
  25              	
  26 0024 B8010000 	mov $EXIT_NR          , %eax
  26      00
  27 0029 BB000000 	mov $EXIT_CODE_SUCCESS, %ebx 
  27      00
  28 002e CD80     	int $0x80
  29              	

$ ls
rw.s
$ as rw.s
$ ls 
a.out  rw.s
$ file a.out
a.out: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped
$ ./a.out
bash: ./a.out: Brak dostÄ™pu
$ ld a.out 
a.out: file not recognized: File truncated
$ as rw.s
$ ls
a.out  rw.s
$ ld a.out -o rw
$ ls
a.out  rw  rw.s
$ ./rw 
Hello, world!
$ rm a.out rw
$ ls
rw.s
 

$ as -o rw.o rw.s
$ ls -a
.  ..  rw.o  rw.s
$ file rw.o
rw.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped
$ ld -o rw rw.o
$ ls -a
.  ..  rw  rw.o  rw.s
$ file rw
rw: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
$ ./rw 
Hello, world!
$ objdump
Usage: objdump <option(s)> <file(s)>
 Display information from object <file(s)>.
 At least one of the following switches must be given:
  -a, --archive-headers    Display archive header information
  -f, --file-headers       Display the contents of the overall file header
  -p, --private-headers    Display object format specific file header contents
  -P, --private=OPT,OPT... Display object format specific contents
  -h, --[section-]headers  Display the contents of the section headers
  -x, --all-headers        Display the contents of all headers
  -d, --disassemble        Display assembler contents of executable sections
  -D, --disassemble-all    Display assembler contents of all sections
  -S, --source             Intermix source code with disassembly
  -s, --full-contents      Display the full contents of all sections requested
  -g, --debugging          Display debug information in object file
  -e, --debugging-tags     Display debug information using ctags style
  -G, --stabs              Display (in raw form) any STABS info in the file
  -W[lLiaprmfFsoRt] or
  --dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,
          =frames-interp,=str,=loc,=Ranges,=pubtypes,
          =gdb_index,=trace_info,=trace_abbrev,=trace_aranges]
                           Display DWARF info in the file
  -t, --syms               Display the contents of the symbol table(s)
  -T, --dynamic-syms       Display the contents of the dynamic symbol table
  -r, --reloc              Display the relocation entries in the file
  -R, --dynamic-reloc      Display the dynamic relocation entries in the file
  @<file>                  Read options from <file>
  -v, --version            Display this program's version number
  -i, --info               List object formats and architectures supported
  -H, --help               Display this information
$ objdump -f rw

rw:     file format elf64-x86-64
architecture: i386:x86-64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000400086

$ nm rw
0000000000000000 a EXIT_CODE_SUCCESS
0000000000000001 a EXIT_NR
0000000000000003 a READ_NR
0000000000000001 a STDOUT
0000000000000004 a WRITE_NR
0000000000601000 A __bss_start
0000000000601000 A _edata
0000000000601000 A _end
0000000000400086 T _start
0000000000400078 t msg
000000000000000e a msgLen
$ nm rw.o
0000000000000000 a EXIT_CODE_SUCCESS
0000000000000001 a EXIT_NR
0000000000000003 a READ_NR
0000000000000001 a STDOUT
0000000000000004 a WRITE_NR
000000000000000e T _start
0000000000000000 t msg
000000000000000e a msgLen
$ objdump -x rw

rw:     file format elf64-x86-64
rw
architecture: i386:x86-64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000400086

Program Header:
    LOAD off    0x0000000000000000 vaddr 0x0000000000400000 paddr 0x0000000000400000 align 2**21
         filesz 0x00000000000000a8 memsz 0x00000000000000a8 flags r-x

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         00000030  0000000000400078  0000000000400078  00000078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
SYMBOL TABLE:
0000000000400078 l    d  .text	0000000000000000 .text
0000000000000001 l       *ABS*	0000000000000000 EXIT_NR
0000000000000003 l       *ABS*	0000000000000000 READ_NR
0000000000000004 l       *ABS*	0000000000000000 WRITE_NR
0000000000000001 l       *ABS*	0000000000000000 STDOUT
0000000000000000 l       *ABS*	0000000000000000 EXIT_CODE_SUCCESS
0000000000400078 l       .text	0000000000000000 msg
000000000000000e l       *ABS*	0000000000000000 msgLen
0000000000400086 g       .text	0000000000000000 _start
0000000000601000 g       *ABS*	0000000000000000 __bss_start
0000000000601000 g       *ABS*	0000000000000000 _edata
0000000000601000 g       *ABS*	0000000000000000 _end


$ hexdump -C rw
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  86 00 40 00 00 00 00 00  |..>.......@.....|
00000020  40 00 00 00 00 00 00 00  d0 00 00 00 00 00 00 00  |@...............|
00000030  00 00 00 00 40 00 38 00  01 00 40 00 05 00 02 00  |....@.8...@.....|
00000040  01 00 00 00 05 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 40 00 00 00 00 00  00 00 40 00 00 00 00 00  |..@.......@.....|
00000060  a8 00 00 00 00 00 00 00  a8 00 00 00 00 00 00 00  |................|
00000070  00 00 20 00 00 00 00 00  48 65 6c 6c 6f 2c 20 77  |.. .....Hello, w|
00000080  6f 72 6c 64 21 0a b8 04  00 00 00 bb 01 00 00 00  |orld!...........|
00000090  b9 78 00 40 00 ba 0e 00  00 00 cd 80 b8 01 00 00  |.x.@............|
000000a0  00 bb 00 00 00 00 cd 80  00 2e 73 79 6d 74 61 62  |..........symtab|
000000b0  00 2e 73 74 72 74 61 62  00 2e 73 68 73 74 72 74  |..strtab..shstrt|
000000c0  61 62 00 2e 74 65 78 74  00 00 00 00 00 00 00 00  |ab..text........|
000000d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000110  1b 00 00 00 01 00 00 00  06 00 00 00 00 00 00 00  |................|
00000120  78 00 40 00 00 00 00 00  78 00 00 00 00 00 00 00  |x.@.....x.......|
00000130  30 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |0...............|
00000140  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000150  11 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
00000160  00 00 00 00 00 00 00 00  a8 00 00 00 00 00 00 00  |................|
00000170  21 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |!...............|
00000180  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000190  01 00 00 00 02 00 00 00  00 00 00 00 00 00 00 00  |................|
000001a0  00 00 00 00 00 00 00 00  10 02 00 00 00 00 00 00  |................|
000001b0  38 01 00 00 00 00 00 00  04 00 00 00 09 00 00 00  |8...............|
000001c0  08 00 00 00 00 00 00 00  18 00 00 00 00 00 00 00  |................|
000001d0  09 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
000001e0  00 00 00 00 00 00 00 00  48 03 00 00 00 00 00 00  |........H.......|
000001f0  5d 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |]...............|
00000200  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000210  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000220  00 00 00 00 00 00 00 00  00 00 00 00 03 00 01 00  |................|
00000230  78 00 40 00 00 00 00 00  00 00 00 00 00 00 00 00  |x.@.............|
00000240  01 00 00 00 00 00 f1 ff  01 00 00 00 00 00 00 00  |................|
00000250  00 00 00 00 00 00 00 00  09 00 00 00 00 00 f1 ff  |................|
00000260  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000270  11 00 00 00 00 00 f1 ff  04 00 00 00 00 00 00 00  |................|
00000280  00 00 00 00 00 00 00 00  1a 00 00 00 00 00 f1 ff  |................|
00000290  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000002a0  21 00 00 00 00 00 f1 ff  00 00 00 00 00 00 00 00  |!...............|
000002b0  00 00 00 00 00 00 00 00  33 00 00 00 00 00 01 00  |........3.......|
000002c0  78 00 40 00 00 00 00 00  00 00 00 00 00 00 00 00  |x.@.............|
000002d0  37 00 00 00 00 00 f1 ff  0e 00 00 00 00 00 00 00  |7...............|
000002e0  00 00 00 00 00 00 00 00  3e 00 00 00 10 00 01 00  |........>.......|
000002f0  86 00 40 00 00 00 00 00  00 00 00 00 00 00 00 00  |..@.............|
00000300  45 00 00 00 10 00 f1 ff  00 10 60 00 00 00 00 00  |E.........`.....|
00000310  00 00 00 00 00 00 00 00  51 00 00 00 10 00 f1 ff  |........Q.......|
00000320  00 10 60 00 00 00 00 00  00 00 00 00 00 00 00 00  |..`.............|
00000330  58 00 00 00 10 00 f1 ff  00 10 60 00 00 00 00 00  |X.........`.....|
00000340  00 00 00 00 00 00 00 00  00 45 58 49 54 5f 4e 52  |.........EXIT_NR|
00000350  00 52 45 41 44 5f 4e 52  00 57 52 49 54 45 5f 4e  |.READ_NR.WRITE_N|
00000360  52 00 53 54 44 4f 55 54  00 45 58 49 54 5f 43 4f  |R.STDOUT.EXIT_CO|
00000370  44 45 5f 53 55 43 43 45  53 53 00 6d 73 67 00 6d  |DE_SUCCESS.msg.m|
00000380  73 67 4c 65 6e 00 5f 73  74 61 72 74 00 5f 5f 62  |sgLen._start.__b|
00000390  73 73 5f 73 74 61 72 74  00 5f 65 64 61 74 61 00  |ss_start._edata.|
000003a0  5f 65 6e 64 00                                    |_end.|
000003a5
$ strip rw
$ nm rw
nm: rw: no symbols
$ hexdump -C rw
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  86 00 40 00 00 00 00 00  |..>.......@.....|
00000020  40 00 00 00 00 00 00 00  c0 00 00 00 00 00 00 00  |@...............|
00000030  00 00 00 00 40 00 38 00  01 00 40 00 03 00 02 00  |....@.8...@.....|
00000040  01 00 00 00 05 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 40 00 00 00 00 00  00 00 40 00 00 00 00 00  |..@.......@.....|
00000060  a8 00 00 00 00 00 00 00  a8 00 00 00 00 00 00 00  |................|
00000070  00 00 20 00 00 00 00 00  48 65 6c 6c 6f 2c 20 77  |.. .....Hello, w|
00000080  6f 72 6c 64 21 0a b8 04  00 00 00 bb 01 00 00 00  |orld!...........|
00000090  b9 78 00 40 00 ba 0e 00  00 00 cd 80 b8 01 00 00  |.x.@............|
000000a0  00 bb 00 00 00 00 cd 80  00 2e 73 68 73 74 72 74  |..........shstrt|
000000b0  61 62 00 2e 74 65 78 74  00 00 00 00 00 00 00 00  |ab..text........|
000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000100  0b 00 00 00 01 00 00 00  06 00 00 00 00 00 00 00  |................|
00000110  78 00 40 00 00 00 00 00  78 00 00 00 00 00 00 00  |x.@.....x.......|
00000120  30 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |0...............|
00000130  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000140  01 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
00000150  00 00 00 00 00 00 00 00  a8 00 00 00 00 00 00 00  |................|
00000160  11 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000170  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000180
$ objdump -d rw

rw:     file format elf64-x86-64


Disassembly of section .text:

0000000000400078 <.text>:
  400078:	48                   	rex.W
  400079:	65                   	gs
  40007a:	6c                   	insb   (%dx),%es:(%rdi)
  40007b:	6c                   	insb   (%dx),%es:(%rdi)
  40007c:	6f                   	outsl  %ds:(%rsi),(%dx)
  40007d:	2c 20                	sub    $0x20,%al
  40007f:	77 6f                	ja     0x4000f0
  400081:	72 6c                	jb     0x4000ef
  400083:	64 21 0a             	and    %ecx,%fs:(%rdx)
  400086:	b8 04 00 00 00       	mov    $0x4,%eax
  40008b:	bb 01 00 00 00       	mov    $0x1,%ebx
  400090:	b9 78 00 40 00       	mov    $0x400078,%ecx
  400095:	ba 0e 00 00 00       	mov    $0xe,%edx
  40009a:	cd 80                	int    $0x80
  40009c:	b8 01 00 00 00       	mov    $0x1,%eax
  4000a1:	bb 00 00 00 00       	mov    $0x0,%ebx
  4000a6:	cd 80                	int    $0x80



$ ls
rw.s
$ man as
$ as --32 -o rw.o rw.s
$ ls 
rw.o  rw.s
$ file rw.o
rw.o: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), not stripped
$ ld -o rw rw.o
ld: i386 architecture of input file `rw.o' is incompatible with i386:x86-64 output
$ ls
rw.o  rw.s
$ ld --verbose
GNU ld (GNU Binutils for Ubuntu) 2.22
  Supported emulations:
   elf_x86_64
   elf32_x86_64
   elf_i386
   i386linux
   elf_l1om
   elf_k1om
using internal linker script:
==================================================
/* Script for -z combreloc: combine and sort reloc sections */
OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
	      "elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)
ENTRY(_start)
SEARCH_DIR("/usr/x86_64-linux-gnu/lib64"); SEARCH_DIR("=/usr/local/lib/x86_64-linux-gnu"); SEARCH_DIR("=/usr/local/lib64"); SEARCH_DIR("=/lib/x86_64-linux-gnu"); SEARCH_DIR("=/lib64"); SEARCH_DIR("=/usr/lib/x86_64-linux-gnu"); SEARCH_DIR("=/usr/lib64"); SEARCH_DIR("=/usr/local/lib"); SEARCH_DIR("=/lib"); SEARCH_DIR("=/usr/lib");
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
  .interp         : { *(.interp) }
  .note.gnu.build-id : { *(.note.gnu.build-id) }
  .hash           : { *(.hash) }
  .gnu.hash       : { *(.gnu.hash) }
  .dynsym         : { *(.dynsym) }
  .dynstr         : { *(.dynstr) }
  .gnu.version    : { *(.gnu.version) }
  .gnu.version_d  : { *(.gnu.version_d) }
  .gnu.version_r  : { *(.gnu.version_r) }
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
      *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
      *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
      *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
      *(.rela.ifunc)
    }
  .rela.plt       :
    {
      *(.rela.plt)
      PROVIDE_HIDDEN (__rela_iplt_start = .);
      *(.rela.iplt)
      PROVIDE_HIDDEN (__rela_iplt_end = .);
    }
  .init           :
  {
    KEEP (*(.init))
  } =0x90909090
  .plt            : { *(.plt) *(.iplt) }
  .text           :
  {
    *(.text.unlikely .text.*_unlikely)
    *(.text.exit .text.exit.*)
    *(.text.startup .text.startup.*)
    *(.text.hot .text.hot.*)
    *(.text .stub .text.* .gnu.linkonce.t.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  } =0x90909090
  .fini           :
  {
    KEEP (*(.fini))
  } =0x90909090
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
  .rodata1        : { *(.rodata1) }
  .eh_frame_hdr : { *(.eh_frame_hdr) }
  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) }
  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
  .gcc_except_table.*) }
  /* These sections are generated by the Sun/Oracle C++ compiler.  */
  .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
  .exception_ranges*) }
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = ALIGN (CONSTANT (MAXPAGESIZE)) - ((CONSTANT (MAXPAGESIZE) - .) & (CONSTANT (MAXPAGESIZE) - 1)); . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
  /* Exception handling  */
  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) }
  .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
  .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
  /* Thread Local Storage sections  */
  .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
  .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  }
  .init_array     :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array))
    KEEP (*(EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  }
  .fini_array     :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array))
    KEEP (*(EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  }
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  }
  .dtors          :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  }
  .jcr            : { KEEP (*(.jcr)) }
  .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro* .gnu.linkonce.d.rel.ro.*) }
  .dynamic        : { *(.dynamic) }
  .got            : { *(.got) *(.igot) }
  . = DATA_SEGMENT_RELRO_END (24, .);
  .got.plt        : { *(.got.plt)  *(.igot.plt) }
  .data           :
  {
    *(.data .data.* .gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
  }
  .data1          : { *(.data1) }
  _edata = .; PROVIDE (edata = .);
  __bss_start = .;
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.
      FIXME: Why do we need it? When there is no .bss section, we don't
      pad the .data section.  */
   . = ALIGN(. != 0 ? 64 / 8 : 1);
  }
  .lbss   :
  {
    *(.dynlbss)
    *(.lbss .lbss.* .gnu.linkonce.lb.*)
    *(LARGE_COMMON)
  }
  . = ALIGN(64 / 8);
  .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
  {
    *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
  }
  .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
  {
    *(.ldata .ldata.* .gnu.linkonce.l.*)
    . = ALIGN(. != 0 ? 64 / 8 : 1);
  }
  . = ALIGN(64 / 8);
  _end = .; PROVIDE (end = .);
  . = DATA_SEGMENT_END (.);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}


==================================================
$ ld -V
GNU ld (GNU Binutils for Ubuntu) 2.22
  Supported emulations:
   elf_x86_64
   elf32_x86_64
   elf_i386
   i386linux
   elf_l1om
   elf_k1om
$ ls /usr/lib/ldscripts
elf32_x86_64.x	  elf32_x86_64.xu  elf_i386.xsc  elf_k1om.xr   elf_l1om.xdw    elf_x86_64.xd   i386linux.xbn
elf32_x86_64.xbn  elf32_x86_64.xw  elf_i386.xsw  elf_k1om.xs   elf_l1om.xn     elf_x86_64.xdc  i386linux.xn
elf32_x86_64.xc   elf_i386.x	   elf_i386.xu	 elf_k1om.xsc  elf_l1om.xr     elf_x86_64.xdw  i386linux.xr
elf32_x86_64.xd   elf_i386.xbn	   elf_i386.xw	 elf_k1om.xsw  elf_l1om.xs     elf_x86_64.xn   i386linux.xu
elf32_x86_64.xdc  elf_i386.xc	   elf_k1om.x	 elf_k1om.xu   elf_l1om.xsc    elf_x86_64.xr   msp430.x
elf32_x86_64.xdw  elf_i386.xd	   elf_k1om.xbn  elf_k1om.xw   elf_l1om.xsw    elf_x86_64.xs   msp430.xbn
elf32_x86_64.xn   elf_i386.xdc	   elf_k1om.xc	 elf_l1om.x    elf_l1om.xu     elf_x86_64.xsc  msp430.xn
elf32_x86_64.xr   elf_i386.xdw	   elf_k1om.xd	 elf_l1om.xbn  elf_l1om.xw     elf_x86_64.xsw  msp430.xr
elf32_x86_64.xs   elf_i386.xn	   elf_k1om.xdc  elf_l1om.xc   elf_x86_64.x    elf_x86_64.xu   msp430.xu
elf32_x86_64.xsc  elf_i386.xr	   elf_k1om.xdw  elf_l1om.xd   elf_x86_64.xbn  elf_x86_64.xw
elf32_x86_64.xsw  elf_i386.xs	   elf_k1om.xn	 elf_l1om.xdc  elf_x86_64.xc   i386linux.x
$ ld -m elf_i386 -o rw rw.o
$ ls
rw  rw.o  rw.s
$ file rw
rw: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped
$ ./rw 
Hello, world!
$ objdump -f rw

rw:     file format elf32-i386
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08048062


$ objdump -x rw

rw:     file format elf32-i386
rw
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08048062

Program Header:
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x00000084 memsz 0x00000084 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000030  08048054  08048054  00000054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
SYMBOL TABLE:
08048054 l    d  .text	00000000 .text
00000001 l       *ABS*	00000000 EXIT_NR
00000003 l       *ABS*	00000000 READ_NR
00000004 l       *ABS*	00000000 WRITE_NR
00000001 l       *ABS*	00000000 STDOUT
00000000 l       *ABS*	00000000 EXIT_CODE_SUCCESS
08048054 l       .text	00000000 msg
0000000e l       *ABS*	00000000 msgLen
08048062 g       .text	00000000 _start
08049084 g       *ABS*	00000000 __bss_start
08049084 g       *ABS*	00000000 _edata
08049084 g       *ABS*	00000000 _end


$ ld -m elf_i386 --verbose
GNU ld (GNU Binutils for Ubuntu) 2.22
  Supported emulations:
   elf_x86_64
   elf32_x86_64
   elf_i386
   i386linux
   elf_l1om
   elf_k1om
using internal linker script:
==================================================
/* Script for -z combreloc: combine and sort reloc sections */
OUTPUT_FORMAT("elf32-i386", "elf32-i386",
	      "elf32-i386")
OUTPUT_ARCH(i386)
ENTRY(_start)
SEARCH_DIR("/usr/i386-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-linux-gnu/lib32"); SEARCH_DIR("=/usr/local/lib/i386-linux-gnu"); SEARCH_DIR("=/usr/local/lib32"); SEARCH_DIR("=/lib/i386-linux-gnu"); SEARCH_DIR("=/lib32"); SEARCH_DIR("=/usr/lib/i386-linux-gnu"); SEARCH_DIR("=/usr/lib32"); SEARCH_DIR("=/usr/local/lib"); SEARCH_DIR("=/lib"); SEARCH_DIR("=/usr/lib");
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
  .interp         : { *(.interp) }
  .note.gnu.build-id : { *(.note.gnu.build-id) }
  .hash           : { *(.hash) }
  .gnu.hash       : { *(.gnu.hash) }
  .dynsym         : { *(.dynsym) }
  .dynstr         : { *(.dynstr) }
  .gnu.version    : { *(.gnu.version) }
  .gnu.version_d  : { *(.gnu.version_d) }
  .gnu.version_r  : { *(.gnu.version_r) }
  .rel.dyn        :
    {
      *(.rel.init)
      *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
      *(.rel.fini)
      *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
      *(.rel.data.rel.ro* .rel.gnu.linkonce.d.rel.ro.*)
      *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
      *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
      *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
      *(.rel.ctors)
      *(.rel.dtors)
      *(.rel.got)
      *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
      *(.rel.ifunc)
    }
  .rel.plt        :
    {
      *(.rel.plt)
      PROVIDE_HIDDEN (__rel_iplt_start = .);
      *(.rel.iplt)
      PROVIDE_HIDDEN (__rel_iplt_end = .);
    }
  .init           :
  {
    KEEP (*(.init))
  } =0x90909090
  .plt            : { *(.plt) *(.iplt) }
  .text           :
  {
    *(.text.unlikely .text.*_unlikely)
    *(.text.exit .text.exit.*)
    *(.text.startup .text.startup.*)
    *(.text.hot .text.hot.*)
    *(.text .stub .text.* .gnu.linkonce.t.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  } =0x90909090
  .fini           :
  {
    KEEP (*(.fini))
  } =0x90909090
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
  .rodata1        : { *(.rodata1) }
  .eh_frame_hdr : { *(.eh_frame_hdr) }
  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) }
  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
  .gcc_except_table.*) }
  /* These sections are generated by the Sun/Oracle C++ compiler.  */
  .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
  .exception_ranges*) }
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = ALIGN (CONSTANT (MAXPAGESIZE)) - ((CONSTANT (MAXPAGESIZE) - .) & (CONSTANT (MAXPAGESIZE) - 1)); . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
  /* Exception handling  */
  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) }
  .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
  .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
  /* Thread Local Storage sections  */
  .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
  .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  }
  .init_array     :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array))
    KEEP (*(EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  }
  .fini_array     :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array))
    KEEP (*(EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  }
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  }
  .dtors          :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  }
  .jcr            : { KEEP (*(.jcr)) }
  .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro* .gnu.linkonce.d.rel.ro.*) }
  .dynamic        : { *(.dynamic) }
  .got            : { *(.got) *(.igot) }
  . = DATA_SEGMENT_RELRO_END (12, .);
  .got.plt        : { *(.got.plt)  *(.igot.plt) }
  .data           :
  {
    *(.data .data.* .gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
  }
  .data1          : { *(.data1) }
  _edata = .; PROVIDE (edata = .);
  __bss_start = .;
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.
      FIXME: Why do we need it? When there is no .bss section, we don't
      pad the .data section.  */
   . = ALIGN(. != 0 ? 32 / 8 : 1);
  }
  . = ALIGN(32 / 8);
  . = ALIGN(32 / 8);
  _end = .; PROVIDE (end = .);
  . = DATA_SEGMENT_END (.);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}


==================================================

